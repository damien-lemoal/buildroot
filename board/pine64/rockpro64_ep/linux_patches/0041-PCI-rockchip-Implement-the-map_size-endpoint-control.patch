From 3024d7d8bf5b2df2f7cec5e31c50991d0a9cb757 Mon Sep 17 00:00:00 2001
From: Damien Le Moal <dlemoal@kernel.org>
Date: Thu, 13 Apr 2023 17:46:30 +0900
Subject: [PATCH 41/46] PCI: rockchip: Implement the map_size endpoint
 controller operation

The rockchip PCIe endpoint controller handles PCIe transfers addresses
by masking the lower bits of the programmed PCI address and using the
same number of lower bits from the CPU address space used for the
mapping. For a PCI mapping os size bytes starting from pci_addr, the
number of bits masked is the number of address bits changing in the
address range [pci_addr..pci_addr + size - 1].

This means that when preparing a PCI address mapping, an endpoint
function driver must use an offset into the allocated controller
memory region that is equal to the mask of the mapping starting PCI
address over rockchip_pcie_ep_ob_atu_num_bits() bits. This offset also
dtermines the maximum size of a mapping given the fixed 1MB controller
memory window size.

Implement the ->map_size() endpoint controller operation to allow this
information to be transparently used by endpoint function drivers
through the function pci_epc_map_size().

Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
---
 drivers/pci/controller/pcie-rockchip-ep.c | 25 +++++++++++++++++++++++
 drivers/pci/controller/pcie-rockchip.h    |  5 +++++
 2 files changed, 30 insertions(+)

diff --git a/drivers/pci/controller/pcie-rockchip-ep.c b/drivers/pci/controller/pcie-rockchip-ep.c
index 922daac7de51..89369eaab8e6 100644
--- a/drivers/pci/controller/pcie-rockchip-ep.c
+++ b/drivers/pci/controller/pcie-rockchip-ep.c
@@ -237,6 +237,30 @@ static inline u32 rockchip_ob_region(phys_addr_t addr)
 	return (addr >> ilog2(SZ_1M)) & 0x1f;
 }
 
+static ssize_t rockchip_pcie_ep_map_size(struct pci_epc *epc, u8 fn, u8 vfn,
+					 u64 pci_addr, size_t pci_size,
+					 size_t *phys_size,
+					 phys_addr_t *phys_ofst)
+{
+	struct rockchip_pcie_ep *ep = epc_get_drvdata(epc);
+	phys_addr_t ofst;
+	size_t map_size;
+	int num_bits =
+		rockchip_pcie_ep_ob_atu_num_bits(&ep->rockchip, pci_addr,
+						 pci_size);
+
+	ofst = pci_addr & ((1UL << num_bits) - 1);
+	if (ofst + pci_size > SZ_1M)
+		map_size = SZ_1M - ofst;
+	else
+		map_size = pci_size;
+
+	*phys_size = ALIGN(ofst + map_size, ROCKCHIP_PCIE_AT_SIZE_ALIGN);
+	*phys_ofst = ofst;
+
+	return map_size;
+}
+
 static int rockchip_pcie_ep_map_addr(struct pci_epc *epc, u8 fn, u8 vfn,
 				     phys_addr_t addr, u64 pci_addr,
 				     size_t size)
@@ -457,6 +481,7 @@ static const struct pci_epc_ops rockchip_pcie_epc_ops = {
 	.write_header	= rockchip_pcie_ep_write_header,
 	.set_bar	= rockchip_pcie_ep_set_bar,
 	.clear_bar	= rockchip_pcie_ep_clear_bar,
+	.map_size	= rockchip_pcie_ep_map_size,
 	.map_addr	= rockchip_pcie_ep_map_addr,
 	.unmap_addr	= rockchip_pcie_ep_unmap_addr,
 	.set_msi	= rockchip_pcie_ep_set_msi,
diff --git a/drivers/pci/controller/pcie-rockchip.h b/drivers/pci/controller/pcie-rockchip.h
index b24a6b22f914..2dc24e83b0fd 100644
--- a/drivers/pci/controller/pcie-rockchip.h
+++ b/drivers/pci/controller/pcie-rockchip.h
@@ -241,6 +241,11 @@
 #define   ROCKCHIP_PCIE_EP_MSIX_CAP_CP_MASK		GENMASK(15, 8)
 #define ROCKCHIP_PCIE_EP_DUMMY_IRQ_ADDR				0x1
 #define ROCKCHIP_PCIE_EP_PCI_LEGACY_IRQ_ADDR		0x3
+
+#define ROCKCHIP_PCIE_AT_MIN_NUM_BITS	8
+#define ROCKCHIP_PCIE_AT_MAX_NUM_BITS	20
+#define ROCKCHIP_PCIE_AT_SIZE_ALIGN	(1UL << ROCKCHIP_PCIE_AT_MIN_NUM_BITS)
+
 #define ROCKCHIP_PCIE_EP_FUNC_BASE(fn) \
 	(PCIE_EP_PF_CONFIG_REGS_BASE + (((fn) << 12) & GENMASK(19, 12)))
 #define ROCKCHIP_PCIE_EP_VIRT_FUNC_BASE(fn) \
-- 
2.41.0

