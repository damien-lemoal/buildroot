From a5fd499bb3e430ad54bf3100e1d3402ce5df1b70 Mon Sep 17 00:00:00 2001
From: Damien Le Moal <dlemoal@kernel.org>
Date: Thu, 13 Apr 2023 17:06:19 +0900
Subject: [PATCH 34/46] PCI: endpoint: Introduce pci_epc_mem_map()/unmap()

Introduce the function pci_epc_mem_map() to facilitate controller memory
address allocation and mapping to a RC PCI address region in endpoint
function drivers.

This function first uses pci_epc_map_size() to determine the controller
memory address alignment (offset and size) constraints. The result of
this function is used to allocate a controller physical memory region
using pci_epc_mem_alloc_addr() and map it to the RC PCI address
space with pci_epc_map_addr(). Since pci_epc_map_size() may indicate
that a mapping can only be smaller than the requested size,
pci_epc_mem_map() may not map the entire RC PCI address region
specified and return a smaller size for the effective mapping.

The counterpart of pci_epc_mem_map() to unmap and free the controller
memory address region is pci_epc_mem_unmap().

Both functions operate using the new struct pci_epc_map data structure
to store the allocation and mapping information. Endpoint function
drivers can use struct pci_epc_map to implement read/write accesses to
the RC PCI address through the ->virt_addr and ->pci_size field.

Co-developed-by: Rick Wertenbroek <rick.wertenbroek@gmail.com>
Signed-off-by: Damien Le Moal <dlemoal@kernel.org>
---
 drivers/pci/endpoint/pci-epc-core.c | 89 +++++++++++++++++++++++++++++
 include/linux/pci-epc.h             | 28 +++++++++
 2 files changed, 117 insertions(+)

diff --git a/drivers/pci/endpoint/pci-epc-core.c b/drivers/pci/endpoint/pci-epc-core.c
index 97edce0c1719..558b61388387 100644
--- a/drivers/pci/endpoint/pci-epc-core.c
+++ b/drivers/pci/endpoint/pci-epc-core.c
@@ -516,6 +516,95 @@ int pci_epc_map_addr(struct pci_epc *epc, u8 func_no, u8 vfunc_no,
 }
 EXPORT_SYMBOL_GPL(pci_epc_map_addr);
 
+/**
+ * pci_epc_mem_map() - allocate and map CPU address to PCI address
+ * @epc: the EPC device on which the CPU address is to be allocated and mapped
+ * @func_no: the physical endpoint function number in the EPC device
+ * @vfunc_no: the virtual endpoint function number in the physical function
+ * @pci_addr: PCI address to which the CPU address should be mapped
+ * @pci_size: the number of bytes to map starting from @pci_addr
+ * @map: where to return the mapping information
+ *
+ * Allocate and map a controller physical address region and map it to a
+ * RC PCI address region, taking into account the controller physical address
+ * constraint (if any). Return the effective size of the mapping, which may
+ * be less than @pci_size.
+ */
+ssize_t pci_epc_mem_map(struct pci_epc *epc, u8 func_no, u8 vfunc_no,
+			u64 pci_addr, size_t pci_size, struct pci_epc_map *map)
+{
+	phys_addr_t phys_ofst = 0;
+	ssize_t map_size, phys_size;
+	int ret;
+
+	if (!pci_epc_check_func(epc, func_no, vfunc_no))
+		return -EINVAL;
+
+	if (!pci_size || !map)
+		return -EINVAL;
+
+	map_size = pci_epc_map_size(epc, func_no, vfunc_no, pci_addr, pci_size,
+				    &phys_size, &phys_ofst);
+	if (map_size < 0) {
+		ret = map_size;
+		goto err;
+	}
+
+	map->size = map_size;
+	map->pci_addr = pci_addr;
+
+	map->virt_base = pci_epc_mem_alloc_addr(epc, &map->phys_base, phys_size);
+	if (!map->virt_base) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	map->phys_size = phys_size;
+	map->phys_addr = map->phys_base + phys_ofst;
+	map->virt_addr = map->virt_base + phys_ofst;
+
+	ret = pci_epc_map_addr(epc, func_no, vfunc_no, map->phys_addr,
+			       pci_addr, map_size);
+	if (ret)
+		goto err_free;
+
+	return map_size;
+
+err_free:
+	pci_epc_mem_free_addr(epc, map->phys_base, map->virt_base, phys_size);
+err:
+	map->size = 0;
+	return ret;
+
+}
+EXPORT_SYMBOL_GPL(pci_epc_mem_map);
+
+/**
+ * pci_epc_mem_unmap() - unmap from PCI address and free a CPU address region
+ * @epc: the EPC device on which the CPU address is allocated and mapped
+ * @func_no: the physical endpoint function number in the EPC device
+ * @vfunc_no: the virtual endpoint function number in the physical function
+ * @map: the mapping information
+ *
+ * Allocate and map local CPU address to a PCI address, accounting for the
+ * controller local CPU address alignement constraints.
+ */
+void pci_epc_mem_unmap(struct pci_epc *epc, u8 func_no, u8 vfunc_no,
+		       struct pci_epc_map *map)
+{
+	if (!pci_epc_check_func(epc, func_no, vfunc_no))
+		return;
+
+	if (!map || !map->size)
+		return;
+
+	pci_epc_unmap_addr(epc, func_no, vfunc_no, map->phys_addr);
+	pci_epc_mem_free_addr(epc, map->phys_base, map->virt_base,
+			      map->phys_size);
+	map->size = 0;
+}
+EXPORT_SYMBOL_GPL(pci_epc_mem_unmap);
+
 /**
  * pci_epc_clear_bar() - reset the BAR
  * @epc: the EPC device for which the BAR has to be cleared
diff --git a/include/linux/pci-epc.h b/include/linux/pci-epc.h
index fa4f3bef331e..1b92983ef248 100644
--- a/include/linux/pci-epc.h
+++ b/include/linux/pci-epc.h
@@ -187,6 +187,28 @@ struct pci_epc_features {
 	size_t	align;
 };
 
+/**
+ * struct pci_epc_map - represents EPC addr space mapping to PCI addr space
+ * @size: size mapped starting from @pci_addr
+ * @pci_addr: mapping start PCI address
+ * @phys_size: size of the EPC memory allocated
+ * @phys_base: base physical address of the allocated EPC memory
+ * @phys_addr: physical address at which @pci_addr is mapped
+ * @virt_base: base virtual address of the allocated EPC memory
+ * @virt_addr: virtual address at which @pci_addr is mapped
+ */
+struct pci_epc_map {
+	size_t		size;
+
+	phys_addr_t	pci_addr;
+
+	size_t		phys_size;
+	phys_addr_t	phys_base;
+	phys_addr_t	phys_addr;
+	void __iomem	*virt_base;
+	void __iomem	*virt_addr;
+};
+
 #define to_pci_epc(device) container_of((device), struct pci_epc, dev)
 
 #define pci_epc_create(dev, ops)    \
@@ -264,4 +286,10 @@ void __iomem *pci_epc_mem_alloc_addr(struct pci_epc *epc,
 				     phys_addr_t *phys_addr, size_t size);
 void pci_epc_mem_free_addr(struct pci_epc *epc, phys_addr_t phys_addr,
 			   void __iomem *virt_addr, size_t size);
+
+ssize_t pci_epc_mem_map(struct pci_epc *epc, u8 func_no, u8 vfunc_no,
+			u64 pci_addr, size_t pci_size, struct pci_epc_map *map);
+void pci_epc_mem_unmap(struct pci_epc *epc, u8 func_no, u8 vfunc_no,
+		       struct pci_epc_map *map);
+
 #endif /* __LINUX_PCI_EPC_H */
-- 
2.41.0

